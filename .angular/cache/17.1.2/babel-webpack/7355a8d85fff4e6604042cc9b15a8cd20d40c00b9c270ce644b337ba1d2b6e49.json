{"ast":null,"code":"import { computed, inject, signal } from '@angular/core';\nimport { tap } from 'rxjs';\nimport { environment } from '@env/environment';\nimport { HttpClient } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nexport class LanguageToolService {\n  constructor() {\n    this.http = inject(HttpClient);\n    this.jsonUrl = `${environment.url}/assets/json/language-tools.json`;\n    // private jsonUrl = `http://localhost:4200/assets/json/language-tools.json`;\n    this.state = signal({\n      data: []\n    });\n    this.languageTools = computed(() => this.state().data);\n    this.getAll();\n  }\n  getAll() {\n    this.http.get(this.jsonUrl).pipe(tap(data => {\n      this.state.update(state => ({\n        ...state,\n        data\n      }));\n    })).subscribe();\n  }\n  static #_ = this.ɵfac = function LanguageToolService_Factory(t) {\n    return new (t || LanguageToolService)();\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: LanguageToolService,\n    factory: LanguageToolService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["computed","inject","signal","tap","environment","HttpClient","LanguageToolService","constructor","http","jsonUrl","url","state","data","languageTools","getAll","get","pipe","update","subscribe","_","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Vyankat\\Downloads\\kevinflor.es-master\\kevinflor.es-master\\src\\app\\pages\\home\\components\\language-tools\\language-tool.service.ts"],"sourcesContent":["import { Injectable, Signal, computed, inject, signal } from '@angular/core';\nimport { tap } from 'rxjs';\nimport { LanguageTool } from '@pages/home/components/language-tools/language-tool.interface';\nimport { environment } from '@env/environment';\nimport { HttpClient } from '@angular/common/http';\nexport interface LanguageToolState {\n  data: LanguageTool[];\n}\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class LanguageToolService {\n  private http = inject(HttpClient)\n  constructor() {\n    this.getAll();\n  }\n  private jsonUrl = `${environment.url}/assets/json/language-tools.json`;\n  // private jsonUrl = `http://localhost:4200/assets/json/language-tools.json`;\n\n  public state = signal<LanguageToolState>({ data: [] });\n  public languageTools: Signal<LanguageTool[]> = computed(\n    () => this.state().data\n  );\n\n  getAll(): void {\n    this.http\n      .get<LanguageTool[]>(this.jsonUrl)\n      .pipe(\n        tap((data: LanguageTool[]) => {\n          this.state.update((state: LanguageToolState) => ({ ...state, data }));\n        })\n      )\n      .subscribe();\n  }\n}\n"],"mappings":"AAAA,SAA6BA,QAAQ,EAAEC,MAAM,EAAEC,MAAM,QAAQ,eAAe;AAC5E,SAASC,GAAG,QAAQ,MAAM;AAE1B,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,SAASC,UAAU,QAAQ,sBAAsB;;AAQjD,OAAM,MAAOC,mBAAmB;EAE9BC,YAAA;IADQ,KAAAC,IAAI,GAAGP,MAAM,CAACI,UAAU,CAAC;IAIzB,KAAAI,OAAO,GAAG,GAAGL,WAAW,CAACM,GAAG,kCAAkC;IACtE;IAEO,KAAAC,KAAK,GAAGT,MAAM,CAAoB;MAAEU,IAAI,EAAE;IAAE,CAAE,CAAC;IAC/C,KAAAC,aAAa,GAA2Bb,QAAQ,CACrD,MAAM,IAAI,CAACW,KAAK,EAAE,CAACC,IAAI,CACxB;IARC,IAAI,CAACE,MAAM,EAAE;EACf;EASAA,MAAMA,CAAA;IACJ,IAAI,CAACN,IAAI,CACNO,GAAG,CAAiB,IAAI,CAACN,OAAO,CAAC,CACjCO,IAAI,CACHb,GAAG,CAAES,IAAoB,IAAI;MAC3B,IAAI,CAACD,KAAK,CAACM,MAAM,CAAEN,KAAwB,KAAM;QAAE,GAAGA,KAAK;QAAEC;MAAI,CAAE,CAAC,CAAC;IACvE,CAAC,CAAC,CACH,CACAM,SAAS,EAAE;EAChB;EAAC,QAAAC,CAAA,G;qBAtBUb,mBAAmB;EAAA;EAAA,QAAAc,EAAA,G;WAAnBd,mBAAmB;IAAAe,OAAA,EAAnBf,mBAAmB,CAAAgB,IAAA;IAAAC,UAAA,EAFlB;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}