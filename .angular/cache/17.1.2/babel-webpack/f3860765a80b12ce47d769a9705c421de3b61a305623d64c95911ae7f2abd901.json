{"ast":null,"code":"import { effect, inject, signal } from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { environment } from '@env/environment';\nimport { catchError, interval, map, switchMap } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nexport class SpotifyService {\n  constructor() {\n    this.spotify = environment.spotify;\n    this.nowPlayingEndpoint = `${this.spotify.apiURL}me/player/currently-playing`;\n    this.recentlyPlayedEndpoint = `${this.spotify.apiURL}me/player/recently-played?limit=1`;\n    this.apiTokenEndpoint = 'https://accounts.spotify.com/api/token';\n    this.http = inject(HttpClient);\n    this.music = signal(null);\n    this.progressTime = signal(0);\n    this.totalDuration = signal(0);\n    effect(() => {\n      this.nowPlaying();\n    });\n  }\n  accessToken() {\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded',\n      'Authorization': `Basic ${btoa(`${this.spotify.clientId}:${this.spotify.clientSecret}`)}`\n    });\n    const params = new HttpParams({\n      fromObject: {\n        'grant_type': 'refresh_token',\n        'refresh_token': this.spotify.clientRefreshToken\n      }\n    });\n    return this.http.post(this.apiTokenEndpoint, params, {\n      headers\n    });\n  }\n  fetchTrackData(endpoint) {\n    return this.accessToken().pipe(switchMap(res => {\n      const headers = new HttpHeaders({\n        'Authorization': `Bearer ${res.access_token}`\n      });\n      return this.http.get(endpoint, {\n        headers\n      }).pipe(map(res => {\n        const hasItem = ('item' in res);\n        return {\n          track: this.mapTrackData(hasItem ? res.item : res.items[0].track),\n          playedAt: hasItem ? res.is_playing ? null : new Date().toISOString() : res.items[0].played_at,\n          isPlaying: hasItem ? res.is_playing : false,\n          progressTime: hasItem ? res.progress_ms : 0,\n          durationTime: hasItem ? res.item.duration_ms : res.items[0].track.duration_ms\n        };\n      }));\n    }));\n  }\n  nowPlaying() {\n    this.fetchTrackData(this.nowPlayingEndpoint).pipe(catchError(() => this.fetchTrackData(this.recentlyPlayedEndpoint))).subscribe(playedResult => {\n      const {\n        progressTime,\n        durationTime,\n        isPlaying\n      } = playedResult;\n      this.music.set(playedResult);\n      if (isPlaying) {\n        this.progressTime.set(progressTime);\n        this.startProgressTracking(isPlaying);\n      } else {\n        this.progressTime.set(durationTime);\n      }\n      this.totalDuration.set(durationTime);\n    });\n  }\n  startProgressTracking(isPlaying) {\n    const stopPlayInterval = () => {\n      if (this.playSubs) {\n        this.playSubs.unsubscribe();\n        this.playSubs = null;\n      }\n    };\n    if (isPlaying) {\n      this.playSubs = interval(1000).subscribe(() => {\n        const currentProgress = this.progressTime() + 1000;\n        if (currentProgress < this.totalDuration()) {\n          this.progressTime.set(currentProgress);\n        } else {\n          stopPlayInterval();\n          this.nowPlaying();\n        }\n      });\n    } else {\n      stopPlayInterval();\n    }\n  }\n  mapTrackData(track) {\n    if (!track) return null;\n    const preAlbumImage = track.album.images.pop();\n    const albumImage = track.album.images.pop() || preAlbumImage;\n    return {\n      name: track.name,\n      artist: track.artists.map(artist => artist.name).join(', '),\n      url: track.external_urls.spotify,\n      image: albumImage ? {\n        url: albumImage.url || '',\n        height: Math.min(albumImage.height || 78, 78),\n        width: Math.min(albumImage.width || 78, 78)\n      } : undefined\n    };\n  }\n  static #_ = this.ɵfac = function SpotifyService_Factory(t) {\n    return new (t || SpotifyService)();\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: SpotifyService,\n    factory: SpotifyService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["effect","inject","signal","HttpClient","HttpHeaders","HttpParams","environment","catchError","interval","map","switchMap","SpotifyService","constructor","spotify","nowPlayingEndpoint","apiURL","recentlyPlayedEndpoint","apiTokenEndpoint","http","music","progressTime","totalDuration","nowPlaying","accessToken","headers","btoa","clientId","clientSecret","params","fromObject","clientRefreshToken","post","fetchTrackData","endpoint","pipe","res","access_token","get","hasItem","track","mapTrackData","item","items","playedAt","is_playing","Date","toISOString","played_at","isPlaying","progress_ms","durationTime","duration_ms","subscribe","playedResult","set","startProgressTracking","stopPlayInterval","playSubs","unsubscribe","currentProgress","preAlbumImage","album","images","pop","albumImage","name","artist","artists","join","url","external_urls","image","height","Math","min","width","undefined","_","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Vyankat\\Downloads\\kevinflor.es-master\\kevinflor.es-master\\src\\app\\core\\services\\spotify.service.ts"],"sourcesContent":["import { Injectable, OnDestroy, effect, inject, signal } from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { environment } from '@env/environment';\nimport { Observable, Subscription, catchError, interval, map, switchMap, tap } from 'rxjs';\nimport { MusicTrack } from '@data/schema/spotify/music-track';\nimport { Token } from '@data/schema/spotify/token';\nimport { CurrentlyPlaying } from '@data/schema/spotify/currently-playing';\nimport { RecentlyPlayed } from '@data/schema/spotify/recently-played';\nimport { TrackItem } from '@data/schema/spotify/track-item';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SpotifyService {\n  spotify = environment.spotify;\n  nowPlayingEndpoint = `${this.spotify.apiURL}me/player/currently-playing`;\n  recentlyPlayedEndpoint = `${this.spotify.apiURL}me/player/recently-played?limit=1`;\n  apiTokenEndpoint = 'https://accounts.spotify.com/api/token';\n\n  http = inject(HttpClient);\n  music = signal<MusicTrack | null>(null);\n  progressTime = signal<number>(0);\n  totalDuration = signal<number>(0);\n  playSubs!: Subscription | null;\n\n  constructor() {\n    effect(() => {\n      this.nowPlaying();\n    });\n  }\n\n  accessToken(): Observable<Token> {\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/x-www-form-urlencoded',\n      'Authorization': `Basic ${btoa(`${this.spotify.clientId}:${this.spotify.clientSecret}`)}`\n    });\n    const params = new HttpParams({\n      fromObject: {\n        'grant_type': 'refresh_token',\n        'refresh_token': this.spotify.clientRefreshToken\n      }\n    });\n    return this.http.post<Token>(this.apiTokenEndpoint, params, { headers });\n  }\n\n  fetchTrackData(endpoint: string): Observable<MusicTrack> {\n    return this.accessToken().pipe(switchMap(res => {\n      const headers = new HttpHeaders({\n        'Authorization': `Bearer ${res.access_token}`\n      });\n      return this.http.get<RecentlyPlayed | CurrentlyPlaying>(endpoint, { headers }).pipe(map(res => {\n        const hasItem = 'item' in res;\n        return {\n          track: this.mapTrackData(hasItem ? res.item : res.items[0].track),\n          playedAt: hasItem ? (res.is_playing ? null: new Date().toISOString()) : res.items[0].played_at,\n          isPlaying: hasItem ? res.is_playing : false,\n          progressTime: hasItem ? res.progress_ms : 0,\n          durationTime: hasItem ? res.item.duration_ms : res.items[0].track.duration_ms\n        } as MusicTrack;\n      }));\n    }));\n  }\n\n  nowPlaying(): void {\n    this.fetchTrackData(this.nowPlayingEndpoint).pipe(\n      catchError(() => this.fetchTrackData(this.recentlyPlayedEndpoint))\n    ).subscribe(playedResult => {\n      const { progressTime , durationTime, isPlaying } = playedResult;\n      this.music.set(playedResult)\n      if(isPlaying){\n        this.progressTime.set(progressTime);\n        this.startProgressTracking(isPlaying);\n      }else{\n        this.progressTime.set(durationTime);\n      }\n      this.totalDuration.set(durationTime);\n    });\n  }\n\n  startProgressTracking(isPlaying: boolean): void {\n    const stopPlayInterval = () => {\n      if (this.playSubs) {\n        this.playSubs.unsubscribe();\n        this.playSubs = null;\n      }\n    }\n    if (isPlaying) {\n      this.playSubs = interval(1000).subscribe(() => {\n        const currentProgress = this.progressTime() + 1000;\n        if (currentProgress < this.totalDuration()) {\n          this.progressTime.set(currentProgress);\n        } else {\n          stopPlayInterval();\n          this.nowPlaying();\n        }\n      });\n    } else {\n      stopPlayInterval();\n    }\n  }\n\n  mapTrackData(track: TrackItem): MusicTrack['track'] | null {\n    if (!track) return null;\n    const preAlbumImage = track.album.images.pop();\n    const albumImage = track.album.images.pop() || preAlbumImage;\n    return {\n      name: track.name,\n      artist: track.artists.map(artist => artist.name).join(', '),\n      url: track.external_urls.spotify,\n      image: albumImage ? {\n        url: albumImage.url || '',\n        height: Math.min(albumImage.height || 78, 78),\n        width: Math.min(albumImage.width || 78, 78),\n      } : undefined,\n    };\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}