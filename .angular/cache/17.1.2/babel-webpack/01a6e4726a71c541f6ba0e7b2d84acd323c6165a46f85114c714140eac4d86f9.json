{"ast":null,"code":"import { effect, inject, signal } from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { map, of, switchMap, tap } from 'rxjs';\nimport { environment } from '@env/environment';\nimport * as i0 from \"@angular/core\";\nexport class TraktTvService {\n  constructor() {\n    this.http = inject(HttpClient);\n    this.watch = signal(null);\n    this.trackTv = environment.traktTv;\n    this.themoviedb = environment.themoviedb;\n    this.nowWatchingEndpoint = `${this.trackTv.apiURL}users/${this.trackTv.username}/watching`;\n    this.recentlyWatchedEndpoint = `${this.trackTv.apiURL}sync/history`;\n    effect(() => {\n      this.getResult();\n    });\n  }\n  movieData(data) {\n    const isArray = Array.isArray(data);\n    const res = isArray ? data[0] : data;\n    const watchedAt = isArray ? data[0].watched_at : null;\n    if ('type' in res) {\n      const isMovie = res.type === 'movie';\n      const item = isMovie ? res.movie : res.show;\n      const headTitle = item.title;\n      const title = isMovie ? 'Movie' : `Season ${res.episode.season} - Episode ${res.episode.number}`;\n      return {\n        type: res.type,\n        headTitle,\n        title,\n        year: item.year,\n        tmdb: item.ids.tmdb,\n        isWatching: !isArray,\n        watchedAt,\n        url: isMovie ? `${this.trackTv.url}movies/${res.movie.ids.slug}` : `${this.trackTv.url}shows/${res.show.ids.slug}/seasons/${res.episode.season}/episodes/${res.episode.number}`\n      };\n    }\n    throw new Error('Invalid data format');\n  }\n  startEndDateByThisYear() {\n    const startDate = new Date(`${new Date().getFullYear()}-01-01`);\n    const startDateIsoString = startDate.toISOString();\n    const endDateIsoString = new Date().toISOString();\n    return {\n      startDate: startDateIsoString,\n      endDate: endDateIsoString\n    };\n  }\n  getWatching() {\n    let headers = new HttpHeaders();\n    headers = headers.append('Content-Type', `application/json`);\n    headers = headers.append('trakt-api-version', this.trackTv.version.toString());\n    headers = headers.append('trakt-api-key', this.trackTv.clientId);\n    return this.http.get(this.nowWatchingEndpoint, {\n      headers\n    }).pipe(switchMap(res => {\n      if (!res) {\n        headers = headers.append('Authorization', `Bearer ${this.trackTv.token}`);\n        const {\n          startDate,\n          endDate\n        } = this.startEndDateByThisYear();\n        let params = new HttpParams().set('start_at', startDate).set('end_at', endDate);\n        return this.http.get(this.recentlyWatchedEndpoint, {\n          params,\n          headers\n        }).pipe(map(histories => this.movieData(histories)));\n      }\n      return of(this.movieData(res));\n    }));\n  }\n  getResult() {\n    this.getWatching().pipe(switchMap(res => {\n      const headers = new HttpHeaders({\n        'accept': `application/json`,\n        'Authorization': `Bearer ${this.themoviedb.token}`\n      });\n      let params = new HttpParams().set('include_image_language', this.themoviedb.language).set('end_at', this.themoviedb.language);\n      const type = res.type == 'movie' ? 'movie' : 'tv';\n      const url = `${this.themoviedb.apiURL}${type}/${res.tmdb}/images`;\n      return this.http.get(url, {\n        params,\n        headers\n      }).pipe(tap(image => this.watch.set({\n        ...res,\n        image: `https://image.tmdb.org/t/p/original/${image.posters[0].file_path}`\n      })));\n    })).subscribe();\n  }\n  static #_ = this.ɵfac = function TraktTvService_Factory(t) {\n    return new (t || TraktTvService)();\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: TraktTvService,\n    factory: TraktTvService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["effect","inject","signal","HttpClient","HttpHeaders","HttpParams","map","of","switchMap","tap","environment","TraktTvService","constructor","http","watch","trackTv","traktTv","themoviedb","nowWatchingEndpoint","apiURL","username","recentlyWatchedEndpoint","getResult","movieData","data","isArray","Array","res","watchedAt","watched_at","isMovie","type","item","movie","show","headTitle","title","episode","season","number","year","tmdb","ids","isWatching","url","slug","Error","startEndDateByThisYear","startDate","Date","getFullYear","startDateIsoString","toISOString","endDateIsoString","endDate","getWatching","headers","append","version","toString","clientId","get","pipe","token","params","set","histories","language","image","posters","file_path","subscribe","_","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Vyankat\\Downloads\\kevinflor.es-master\\Vyankat Rathod Portfolio\\src\\app\\core\\services\\trakt-tv.service.ts"],"sourcesContent":["import { Injectable, effect, inject, signal } from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http'\nimport { Observable, map, of, switchMap, tap } from 'rxjs';\nimport { Scrobble } from '@data/schema/trakt-tv/scrobble'\nimport { History } from '@data/schema/trakt-tv/history'\nimport { WatchItem } from '@data/schema/trakt-tv/watch-item'\nimport { Image } from '@data/schema/tmdb/image'\nimport { environment } from '@env/environment';\n\n@Injectable({\n  providedIn: 'root'\n})\n\nexport class TraktTvService {\n  http = inject(HttpClient)\n  watch = signal<WatchItem | null>(null);\n  trackTv = environment.traktTv;\n  themoviedb = environment.themoviedb;\n  nowWatchingEndpoint = `${this.trackTv.apiURL}users/${this.trackTv.username}/watching`;\n  recentlyWatchedEndpoint = `${this.trackTv.apiURL}sync/history`;\n  constructor() {\n    effect(() => {\n      this.getResult();\n    })\n  }\n\n  movieData(data: History[] | Scrobble): WatchItem {\n    const isArray = Array.isArray(data);\n    const res = isArray ? data[0] : data;\n    const watchedAt = isArray ? data[0].watched_at : null\n    if ('type' in res) {\n      const isMovie = res.type === 'movie';\n      const item = isMovie ? res.movie : res.show;\n      const headTitle = item.title;\n      const title = isMovie ? 'Movie' : `Season ${res.episode.season} - Episode ${res.episode.number}`\n      return {\n        type: res.type,\n        headTitle,\n        title,\n        year: item.year,\n        tmdb: item.ids.tmdb,\n        isWatching: !isArray,\n        watchedAt,\n        url: isMovie ?\n        `${this.trackTv.url}movies/${res.movie.ids.slug}` :\n        `${this.trackTv.url}shows/${res.show.ids.slug}/seasons/${res.episode.season}/episodes/${res.episode.number}`\n      };\n    }\n    throw new Error('Invalid data format');\n  }\n  startEndDateByThisYear(): { startDate: string, endDate: string } {\n    const startDate = new Date(`${new Date().getFullYear()}-01-01`);\n    const startDateIsoString = startDate.toISOString();\n    const endDateIsoString = new Date().toISOString();\n    return {\n      startDate: startDateIsoString,\n      endDate: endDateIsoString\n    };\n  }\n  getWatching(): Observable<WatchItem> {\n    let headers: HttpHeaders = new HttpHeaders();\n    headers = headers.append('Content-Type', `application/json`)\n    headers = headers.append('trakt-api-version', this.trackTv.version.toString())\n    headers = headers.append('trakt-api-key', this.trackTv.clientId)\n    return this.http.get<Scrobble>(this.nowWatchingEndpoint, { headers }).pipe(\n      switchMap(res => {\n        if (!res) {\n          headers = headers.append('Authorization', `Bearer ${this.trackTv.token}`)\n          const { startDate, endDate } = this.startEndDateByThisYear();\n          let params = new HttpParams()\n            .set('start_at', startDate)\n            .set('end_at', endDate);\n          return this.http.get<History[]>(this.recentlyWatchedEndpoint, { params, headers }).pipe(\n            map(histories => this.movieData(histories)));\n        }\n        return of(this.movieData(res))\n      }))\n  }\n  getResult(): void {\n    this.getWatching().pipe(switchMap(res => {\n      const headers = new HttpHeaders({\n        'accept': `application/json`,\n        'Authorization': `Bearer ${this.themoviedb.token}`\n      });\n      let params = new HttpParams()\n        .set('include_image_language', this.themoviedb.language)\n        .set('end_at', this.themoviedb.language);\n      const type = res.type == 'movie' ? 'movie' : 'tv';\n      const url = `${this.themoviedb.apiURL}${type}/${res.tmdb}/images`;\n      return this.http.get<Image>(url, { params, headers }).pipe(tap(image => this.watch.set(\n        { ...res, image: `https://image.tmdb.org/t/p/original/${image.posters[0].file_path}` }\n      )))\n    })).subscribe()\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}