{"ast":null,"code":"import { inject } from '@angular/core';\nimport { Meta, Title } from '@angular/platform-browser';\nimport { Router } from '@angular/router';\nimport profileData from '@data/profile.data';\nimport { environment } from '@env/environment';\nimport * as i0 from \"@angular/core\";\nexport class MetaService {\n  constructor() {\n    this.defaultImage = './assets/image/meta-image.jpg';\n    this.urlKeywords = ['blog/', 'project/'];\n    this.meta = inject(Meta);\n    this.router = inject(Router);\n    this.title = inject(Title);\n  }\n  get contentType() {\n    return this.urlKeywords.some(str => this.router.url.includes(str)) ? 'article' : 'website';\n  }\n  get rootUrl() {\n    return `${environment.url}${this.router.url}`;\n  }\n  setMetaTags(title, description, keywords, image, metaImageStyle) {\n    this.title.setTitle(title);\n    this.meta.addTags([{\n      name: 'title',\n      content: title\n    }, {\n      name: 'description',\n      content: description\n    }, {\n      name: 'keywords',\n      content: Array.isArray(keywords) ? keywords.join(', ') : keywords\n    }, {\n      name: 'authors',\n      content: profileData.name\n    }, {\n      name: 'og:title',\n      content: title\n    }, {\n      name: 'og:description',\n      content: description\n    }, {\n      name: 'og:url',\n      content: this.rootUrl\n    }, {\n      name: 'og:image',\n      content: image || this.defaultImage\n    }, {\n      name: 'og:locale',\n      content: 'en_US'\n    }, {\n      name: 'og:type',\n      content: this.contentType\n    }, {\n      name: 'og:site_name',\n      content: title\n    }, {\n      name: 'twitter:card',\n      content: metaImageStyle || 'summary_large_image'\n    }, {\n      name: 'twitter:url',\n      content: this.rootUrl\n    }, {\n      name: 'twitter:title',\n      content: title\n    }, {\n      name: 'twitter:description',\n      content: description\n    }, {\n      name: 'twitter:image',\n      content: image || this.defaultImage\n    }, {\n      name: 'twitter:site',\n      content: '@marckevinflores'\n    }, {\n      name: 'twitter:creator',\n      content: '@marckevinflores'\n    }]);\n  }\n  static #_ = this.ɵfac = function MetaService_Factory(t) {\n    return new (t || MetaService)();\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: MetaService,\n    factory: MetaService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["inject","Meta","Title","Router","profileData","environment","MetaService","constructor","defaultImage","urlKeywords","meta","router","title","contentType","some","str","url","includes","rootUrl","setMetaTags","description","keywords","image","metaImageStyle","setTitle","addTags","name","content","Array","isArray","join","_","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Vyankat\\Downloads\\kevinflor.es-master\\kevinflor.es-master\\src\\app\\core\\services\\meta.service.ts"],"sourcesContent":["import { Injectable, inject } from '@angular/core';\nimport { Meta, Title } from '@angular/platform-browser';\nimport { Router } from '@angular/router';\nimport profileData from '@data/profile.data';\nimport { environment } from '@env/environment';\n\ntype MetaImageStyle = 'summary_large_image' | 'summary';\n\n@Injectable({\n  providedIn: 'root'\n})\n\nexport class MetaService {\n  public defaultImage: string = './assets/image/meta-image.jpg'\n  public urlKeywords: string[] = ['blog/', 'project/'];\n  private meta = inject(Meta);\n  private router = inject(Router);\n  private title = inject(Title);\n\n  get contentType(): string{\n   return this.urlKeywords.some(str => this.router.url.includes(str)) ? 'article' : 'website'\n  }\n  get rootUrl(): string{\n    return `${environment.url}${this.router.url}`\n  }\n\n  setMetaTags(title: string, description: string, keywords?: string | Array<string> | null, image?: string | null , metaImageStyle?: MetaImageStyle): void{\n    this.title.setTitle(title);\n    this.meta.addTags([\n      {name: 'title', content: title},\n      {name: 'description', content: description},\n      {name: 'keywords', content: Array.isArray(keywords) ? keywords.join(', ') : keywords as string},\n      {name: 'authors', content: profileData.name},\n      {name: 'og:title', content: title},\n      {name: 'og:description', content: description},\n      {name: 'og:url', content: this.rootUrl},\n      {name: 'og:image', content: image || this.defaultImage},\n      {name: 'og:locale', content: 'en_US'},\n      {name: 'og:type', content: this.contentType},\n      {name: 'og:site_name', content: title},\n      {name: 'twitter:card', content: metaImageStyle || 'summary_large_image'},\n      {name: 'twitter:url', content: this.rootUrl},\n      {name: 'twitter:title', content: title},\n      {name: 'twitter:description', content: description},\n      {name: 'twitter:image', content: image || this.defaultImage},\n      {name: 'twitter:site', content: '@marckevinflores'},\n      {name: 'twitter:creator', content: '@marckevinflores'},\n    ])\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}