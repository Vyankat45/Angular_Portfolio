{"ast":null,"code":"import { inject } from '@angular/core';\nimport { DomSanitizer } from '@angular/platform-browser';\nimport * as i0 from \"@angular/core\";\nexport class SafePipe {\n  constructor() {\n    this.sanitizer = inject(DomSanitizer);\n  }\n  transform(value, type) {\n    switch (type) {\n      case 'html':\n        return this.sanitizer.bypassSecurityTrustHtml(value);\n      case 'style':\n        return this.sanitizer.bypassSecurityTrustStyle(value);\n      case 'script':\n        return this.sanitizer.bypassSecurityTrustScript(value);\n      case 'url':\n        return this.sanitizer.bypassSecurityTrustUrl(value);\n      case 'resourceUrl':\n        return this.sanitizer.bypassSecurityTrustResourceUrl(value);\n      default:\n        throw new Error(`Invalid safe type specified: ${type}`);\n    }\n  }\n  static #_ = this.ɵfac = function SafePipe_Factory(t) {\n    return new (t || SafePipe)();\n  };\n  static #_2 = this.ɵpipe = /*@__PURE__*/i0.ɵɵdefinePipe({\n    name: \"safe\",\n    type: SafePipe,\n    pure: true\n  });\n}","map":{"version":3,"names":["inject","DomSanitizer","SafePipe","constructor","sanitizer","transform","value","type","bypassSecurityTrustHtml","bypassSecurityTrustStyle","bypassSecurityTrustScript","bypassSecurityTrustUrl","bypassSecurityTrustResourceUrl","Error","_","_2","pure"],"sources":["C:\\Users\\Vyankat\\Downloads\\kevinflor.es-master\\kevinflor.es-master\\src\\app\\core\\pipe\\safe.pipe.ts"],"sourcesContent":["import { Pipe, PipeTransform, inject } from '@angular/core';\nimport { DomSanitizer, SafeHtml, SafeStyle, SafeScript, SafeUrl, SafeResourceUrl } from '@angular/platform-browser';\n\n@Pipe({\n  name: 'safe'\n})\nexport class SafePipe implements PipeTransform {\n  protected sanitizer = inject(DomSanitizer)\n\n public transform(value: any, type: string): SafeHtml | SafeStyle | SafeScript | SafeUrl | SafeResourceUrl {\n    switch (type) {\n\t\t\tcase 'html': return this.sanitizer.bypassSecurityTrustHtml(value);\n\t\t\tcase 'style': return this.sanitizer.bypassSecurityTrustStyle(value);\n\t\t\tcase 'script': return this.sanitizer.bypassSecurityTrustScript(value);\n\t\t\tcase 'url': return this.sanitizer.bypassSecurityTrustUrl(value);\n\t\t\tcase 'resourceUrl': return this.sanitizer.bypassSecurityTrustResourceUrl(value);\n\t\t\tdefault: throw new Error(`Invalid safe type specified: ${type}`);\n\t\t}\n  }\n}\n"],"mappings":"AAAA,SAA8BA,MAAM,QAAQ,eAAe;AAC3D,SAASC,YAAY,QAAmE,2BAA2B;;AAKnH,OAAM,MAAOC,QAAQ;EAHrBC,YAAA;IAIY,KAAAC,SAAS,GAAGJ,MAAM,CAACC,YAAY,CAAC;;EAEpCI,SAASA,CAACC,KAAU,EAAEC,IAAY;IACtC,QAAQA,IAAI;MACb,KAAK,MAAM;QAAE,OAAO,IAAI,CAACH,SAAS,CAACI,uBAAuB,CAACF,KAAK,CAAC;MACjE,KAAK,OAAO;QAAE,OAAO,IAAI,CAACF,SAAS,CAACK,wBAAwB,CAACH,KAAK,CAAC;MACnE,KAAK,QAAQ;QAAE,OAAO,IAAI,CAACF,SAAS,CAACM,yBAAyB,CAACJ,KAAK,CAAC;MACrE,KAAK,KAAK;QAAE,OAAO,IAAI,CAACF,SAAS,CAACO,sBAAsB,CAACL,KAAK,CAAC;MAC/D,KAAK,aAAa;QAAE,OAAO,IAAI,CAACF,SAAS,CAACQ,8BAA8B,CAACN,KAAK,CAAC;MAC/E;QAAS,MAAM,IAAIO,KAAK,CAAC,gCAAgCN,IAAI,EAAE,CAAC;;EAEjE;EAAC,QAAAO,CAAA,G;qBAZUZ,QAAQ;EAAA;EAAA,QAAAa,EAAA,G;;UAARb,QAAQ;IAAAc,IAAA;EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}