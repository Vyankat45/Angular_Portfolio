{"ast":null,"code":"import { computed, inject, signal } from '@angular/core';\nimport { map, tap } from 'rxjs';\nimport { HttpClient } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nexport class BlogService {\n  constructor() {\n    // private jsonUrl = `${environment.url}/assets/json/blogs.json`;\n    this.jsonUrl = `http://localhost:4200/assets/json/blogs.json`;\n    this.state = signal({\n      blogs: []\n    });\n    this.blogs = computed(() => this.state().blogs);\n    this.http = inject(HttpClient);\n    this.getAll();\n  }\n  get(slug) {\n    return this.http.get(this.jsonUrl).pipe(map(res => {\n      const blogDetail = res.data.find(x => x.attributes.slug === slug);\n      if (!blogDetail) {\n        throw new Error('Blog Detail not found');\n      }\n      const {\n        id,\n        attributes: {\n          content,\n          title,\n          summary,\n          seo,\n          picture\n        }\n      } = blogDetail;\n      return {\n        id,\n        content,\n        title,\n        summary,\n        image: picture.data.attributes.url,\n        smallImage: picture.data.attributes.formats.small.url,\n        keywords: seo && seo.keywords\n      };\n    }));\n  }\n  getAll() {\n    this.http.get(this.jsonUrl).pipe(map(res => {\n      const blogs = res.data?.map(item => {\n        const {\n          small\n        } = item.attributes.picture.data.attributes.formats;\n        return {\n          id: item.id,\n          title: item.attributes.title,\n          smallImage: small.url,\n          summary: item.attributes.summary,\n          slug: item.attributes.slug\n        };\n      });\n      return blogs;\n    }), tap(blogs => {\n      this.state.update(state => ({\n        ...state,\n        blogs\n      }));\n    })).subscribe();\n  }\n  static #_ = this.ɵfac = function BlogService_Factory(t) {\n    return new (t || BlogService)();\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: BlogService,\n    factory: BlogService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["computed","inject","signal","map","tap","HttpClient","BlogService","constructor","jsonUrl","state","blogs","http","getAll","get","slug","pipe","res","blogDetail","data","find","x","attributes","Error","id","content","title","summary","seo","picture","image","url","smallImage","formats","small","keywords","item","update","subscribe","_","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Vyankat\\Downloads\\kevinflor.es-master\\kevinflor.es-master\\src\\app\\pages\\blog\\blog.service.ts"],"sourcesContent":["import { Injectable, Signal, computed, inject, signal } from '@angular/core';\nimport { Observable, map, tap } from 'rxjs';\nimport { HttpClient } from '@angular/common/http';\nimport { BlogSchema } from '@pages/blog/blog-detail/blog-detail.interface'\nimport { StrapiData, StrapiBlogResponse } from '@data/schema/stapi-blog-response.schema'\nimport { environment } from '@env/environment';\n\ninterface Blog {\n  blogs: BlogSchema[];\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class BlogService {\n  // private jsonUrl = `${environment.url}/assets/json/blogs.json`;\n  private jsonUrl = `http://localhost:4200/assets/json/blogs.json`;\n  public state = signal<Blog>({ blogs: []});\n  public blogs: Signal<BlogSchema[]> = computed(() => this.state().blogs);\n  private http = inject(HttpClient)\n  constructor() {\n    this.getAll();\n  }\n  get(slug: string | null | undefined): Observable<BlogSchema>{\n    return this.http.get<StrapiBlogResponse>(this.jsonUrl).pipe(map(res => {\n      const blogDetail = res.data.find((x: StrapiData) => x.attributes.slug === slug);\n      if (!blogDetail) {\n        throw new Error('Blog Detail not found');\n      }\n      const { id, attributes: { content, title, summary, seo, picture } } = blogDetail\n      return {\n        id,\n        content,\n        title,\n        summary,\n        image: picture.data.attributes.url,\n        smallImage: picture.data.attributes.formats.small.url,\n        keywords: seo && seo.keywords\n      }\n    }))\n  }\n  getAll(): void {\n    this.http.get<StrapiBlogResponse>(this.jsonUrl).pipe(map(res => {\n      const blogs = res.data?.map((item: any) => {\n      const { small } = item.attributes.picture.data.attributes.formats;\n      return {\n        id: item.id,\n        title: item.attributes.title,\n        smallImage: small.url,\n        summary: item.attributes.summary,\n        slug: item.attributes.slug\n      }\n    })\n      return blogs as BlogSchema[]\n    }), tap((blogs: BlogSchema[]) => {\n        this.state.update((state: any) => ({ ...state, blogs }));\n    })).subscribe();\n  }\n}\n"],"mappings":"AAAA,SAA6BA,QAAQ,EAAEC,MAAM,EAAEC,MAAM,QAAQ,eAAe;AAC5E,SAAqBC,GAAG,EAAEC,GAAG,QAAQ,MAAM;AAC3C,SAASC,UAAU,QAAQ,sBAAsB;;AAYjD,OAAM,MAAOC,WAAW;EAMtBC,YAAA;IALA;IACQ,KAAAC,OAAO,GAAG,8CAA8C;IACzD,KAAAC,KAAK,GAAGP,MAAM,CAAO;MAAEQ,KAAK,EAAE;IAAE,CAAC,CAAC;IAClC,KAAAA,KAAK,GAAyBV,QAAQ,CAAC,MAAM,IAAI,CAACS,KAAK,EAAE,CAACC,KAAK,CAAC;IAC/D,KAAAC,IAAI,GAAGV,MAAM,CAACI,UAAU,CAAC;IAE/B,IAAI,CAACO,MAAM,EAAE;EACf;EACAC,GAAGA,CAACC,IAA+B;IACjC,OAAO,IAAI,CAACH,IAAI,CAACE,GAAG,CAAqB,IAAI,CAACL,OAAO,CAAC,CAACO,IAAI,CAACZ,GAAG,CAACa,GAAG,IAAG;MACpE,MAAMC,UAAU,GAAGD,GAAG,CAACE,IAAI,CAACC,IAAI,CAAEC,CAAa,IAAKA,CAAC,CAACC,UAAU,CAACP,IAAI,KAAKA,IAAI,CAAC;MAC/E,IAAI,CAACG,UAAU,EAAE;QACf,MAAM,IAAIK,KAAK,CAAC,uBAAuB,CAAC;;MAE1C,MAAM;QAAEC,EAAE;QAAEF,UAAU,EAAE;UAAEG,OAAO;UAAEC,KAAK;UAAEC,OAAO;UAAEC,GAAG;UAAEC;QAAO;MAAE,CAAE,GAAGX,UAAU;MAChF,OAAO;QACLM,EAAE;QACFC,OAAO;QACPC,KAAK;QACLC,OAAO;QACPG,KAAK,EAAED,OAAO,CAACV,IAAI,CAACG,UAAU,CAACS,GAAG;QAClCC,UAAU,EAAEH,OAAO,CAACV,IAAI,CAACG,UAAU,CAACW,OAAO,CAACC,KAAK,CAACH,GAAG;QACrDI,QAAQ,EAAEP,GAAG,IAAIA,GAAG,CAACO;OACtB;IACH,CAAC,CAAC,CAAC;EACL;EACAtB,MAAMA,CAAA;IACJ,IAAI,CAACD,IAAI,CAACE,GAAG,CAAqB,IAAI,CAACL,OAAO,CAAC,CAACO,IAAI,CAACZ,GAAG,CAACa,GAAG,IAAG;MAC7D,MAAMN,KAAK,GAAGM,GAAG,CAACE,IAAI,EAAEf,GAAG,CAAEgC,IAAS,IAAI;QAC1C,MAAM;UAAEF;QAAK,CAAE,GAAGE,IAAI,CAACd,UAAU,CAACO,OAAO,CAACV,IAAI,CAACG,UAAU,CAACW,OAAO;QACjE,OAAO;UACLT,EAAE,EAAEY,IAAI,CAACZ,EAAE;UACXE,KAAK,EAAEU,IAAI,CAACd,UAAU,CAACI,KAAK;UAC5BM,UAAU,EAAEE,KAAK,CAACH,GAAG;UACrBJ,OAAO,EAAES,IAAI,CAACd,UAAU,CAACK,OAAO;UAChCZ,IAAI,EAAEqB,IAAI,CAACd,UAAU,CAACP;SACvB;MACH,CAAC,CAAC;MACA,OAAOJ,KAAqB;IAC9B,CAAC,CAAC,EAAEN,GAAG,CAAEM,KAAmB,IAAI;MAC5B,IAAI,CAACD,KAAK,CAAC2B,MAAM,CAAE3B,KAAU,KAAM;QAAE,GAAGA,KAAK;QAAEC;MAAK,CAAE,CAAC,CAAC;IAC5D,CAAC,CAAC,CAAC,CAAC2B,SAAS,EAAE;EACjB;EAAC,QAAAC,CAAA,G;qBA3CUhC,WAAW;EAAA;EAAA,QAAAiC,EAAA,G;WAAXjC,WAAW;IAAAkC,OAAA,EAAXlC,WAAW,CAAAmC,IAAA;IAAAC,UAAA,EAFV;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}