{"ast":null,"code":"import { computed, inject, signal } from '@angular/core';\nimport { map, tap } from 'rxjs';\nimport { HttpClient } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nexport class ProjectService {\n  constructor() {\n    this.http = inject(HttpClient);\n    // private jsonUrl = `${environment.url}/assets/json/projects.json`;\n    this.jsonUrl = `http://localhost:4200/assets/json/projects.json`;\n    this.state = signal({\n      projects: []\n    });\n    this.projects = computed(() => this.state().projects);\n    this.featuredProjects = computed(() => this.state().projects?.filter(p => p.featured).map((p, index) => {\n      return {\n        ...p,\n        toRight: (index + 1) % 2 == 0\n      };\n    }));\n    this.otherProjects = computed(() => this.state().projects?.filter(p => !p.featured));\n    this.getAll();\n  }\n  getAll() {\n    this.http.get(this.jsonUrl).pipe(map(res => {\n      const projects = res.data?.map(item => {\n        const {\n          thumbnail\n        } = item.attributes.picture.data.attributes.formats;\n        const {\n          website,\n          playstore,\n          appstore,\n          github\n        } = item.attributes.links;\n        const images = item.attributes.images;\n        return {\n          id: item.id,\n          title: item.attributes.title,\n          description: item.attributes.description,\n          thumbnail: thumbnail.url,\n          links: {\n            website,\n            playstore,\n            appstore,\n            github\n          },\n          featured: item.attributes.featured,\n          tools: item.attributes.tools.data?.map(t => t.attributes.name),\n          image: images.data && images.data[0].attributes.formats.large.url\n        };\n      });\n      return projects;\n    }), tap(projects => {\n      this.state.update(state => ({\n        ...state,\n        projects\n      }));\n    })).subscribe();\n  }\n  static #_ = this.ɵfac = function ProjectService_Factory(t) {\n    return new (t || ProjectService)();\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ProjectService,\n    factory: ProjectService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["computed","inject","signal","map","tap","HttpClient","ProjectService","constructor","http","jsonUrl","state","projects","featuredProjects","filter","p","featured","index","toRight","otherProjects","getAll","get","pipe","res","data","item","thumbnail","attributes","picture","formats","website","playstore","appstore","github","links","images","id","title","description","url","tools","t","name","image","large","update","subscribe","_","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Vyankat\\Downloads\\kevinflor.es-master\\Vyankat Rathod Portfolio\\src\\app\\pages\\project\\project.service.ts"],"sourcesContent":["import { Injectable, Signal, computed, inject, signal } from '@angular/core';\nimport { map, tap } from 'rxjs';\nimport { ProjectSchema } from '@data/schema/project.schema';\nimport { HttpClient } from '@angular/common/http';\n// import { environment } from '@env/environment';\nimport { StrapiProjectResponse, Data } from '@data/schema/strapi-project-response.schema'\nexport interface ProjectState {\n  projects: ProjectSchema[];\n}\n@Injectable({providedIn: 'root'})\nexport class ProjectService {\n  private http = inject(HttpClient)\n  // private jsonUrl = `${environment.url}/assets/json/projects.json`;\n   private jsonUrl = `http://localhost:4200/assets/json/projects.json`;\n\n  public state = signal<ProjectState>({ projects: []});\n  public projects: Signal<ProjectSchema[]> = computed(() => this.state().projects);\n  public featuredProjects: Signal<ProjectSchema[]> = computed(() => this.state().projects?.filter(p => p.featured)\n        .map((p, index) => {return {...p, toRight: (index + 1) % 2 == 0}}))\n\n  public otherProjects: Signal<ProjectSchema[]> = computed(() => this.state().projects?.filter((p: any) => !p.featured))\n\n  constructor() {\n    this.getAll();\n  }\n  getAll(){\n    this.http.get<StrapiProjectResponse>(this.jsonUrl).pipe(map(res => {\n      const projects = res.data?.map((item: Data) => {\n      const { thumbnail } = item.attributes.picture.data.attributes.formats;\n      const { website, playstore, appstore, github } = item.attributes.links\n      const images = item.attributes.images;\n      return {\n        id: item.id,\n        title: item.attributes.title,\n        description: item.attributes.description,\n        thumbnail: thumbnail.url,\n        links: {\n          website,\n          playstore,\n          appstore,\n          github\n        },\n        featured: item.attributes.featured,\n        tools: item.attributes.tools.data?.map((t: any) => t.attributes.name),\n        image: images.data && images.data[0].attributes.formats.large.url\n      }\n    })\n    return projects as ProjectSchema[];\n    }), tap(projects => {\n        this.state.update(state => ({ ...state, projects}));\n    })).subscribe();\n  }\n\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}